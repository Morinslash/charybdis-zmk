#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NUFU 1
#define SYM 2
#define NAV 3
#define MED 4
#define POI 5
#define SCR 6
#define SNI 7

&sl { release-after-ms = <250>; };

&mt {
    tapping-term-ms = <200>;
    require-prior-idle-ms = <150>;
};

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        minus {
            bindings = <&kp MINUS>;
            key-positions = <16 17>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <17 18>;
        };

        combo_l_leftclick {
            bindings = <&mkp LCLK>;
            key-positions = <11 12>;
            layers = <BASE>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
  &kp Q             &kp W        &kp E           &kp R      &kp T           &kp Y            &kp U      &kp I                &kp O             &kp P
  &kp A             &kp S        &kp D           &kp F      &kp G           &kp H            &kp J      &kp K                &kp L             &kp SQT
  &mt LEFT_SHIFT Z  &mt LCTRL X  &mt LEFT_ALT C  &kp V      &kp B           &kp N            &kp M      &mt RIGHT_ALT COMMA  &mt RCTRL PERIOD  &mt RIGHT_SHIFT SLASH
                                 &lt 5 TAB       &kp SPACE  &lt 3 ESCAPE    &lt 1 BACKSPACE  &kp ENTER
            >;
        };

        NuFu {
            label = "Numeral";
            bindings = <
  &kp NUMBER_1          &kp N2                 &kp N3    &kp N4    &kp N5       &kp N6          &kp N7          &kp N8        &kp N9     &kp N0
  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LBKT  &kp RBKT  &kp BSLH     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &kp SEMI
  &trans                &trans                 &trans    &trans    &kp GRAVE    &none           &none           &trans        &trans     &trans
                                               &trans    &trans    &trans       &trans          &trans
            >;
        };

        Symbol {
            label = "Symbol";
            bindings = <
  &kp TILDE  &kp AMPS  &kp STAR   &trans     &kp PLUS     &trans  &kp LBRC  &kp RBRC  &trans   &kp PIPE
  &kp MINUS  &kp DLLR  &kp PRCNT  &kp CARET  &kp EQUAL    &trans  &kp LPAR  &kp RPAR  &kp DQT  &kp APOS
  &kp UNDER  &kp EXCL  &kp AT     &kp HASH   &kp GRAVE    &trans  &kp LBKT  &kp RBKT  &trans   &kp BSLH
                       &trans     &trans     &trans       &trans  &trans
            >;
        };

        Function {
            label = "Function";
            bindings = <
  &kp F1  &kp F2   &kp F3   &kp F4   &kp C_PP        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
  &kp F5  &kp F6   &kp F7   &kp F8   &kp C_VOL_UP    &bt BT_CLR    &none         &none         &none         &none
  &kp F9  &kp F10  &kp F11  &kp F12  &kp C_VOL_DN    &bootloader   &none         &trans        &trans        &trans
                   &trans   &trans   &trans          &trans        &trans
            >;
        };

        Media {
            label = "Media";
            bindings = <
  &trans      &trans        &bt BT_CLR_ALL  &trans            &trans        &trans      &trans            &bt BT_CLR_ALL  &trans        &trans
  &kp C_PREV  &kp C_VOL_DN  &kp C_MUTE      &kp C_VOL_UP      &kp C_NEXT    &kp C_PREV  &kp C_VOL_DN      &kp C_MUTE      &kp C_VOL_UP  &kp C_NEXT
  &trans      &trans        &trans          &trans            &trans        &trans      &trans            &trans          &trans        &trans
                            &trans          &kp C_PLAY_PAUSE  &kp C_STOP    &kp C_STOP  &kp C_PLAY_PAUSE
            >;
        };

        Pointer {
            label = "Pointer";
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans         &trans     &trans          &trans     &trans
  &trans  &trans  &trans  &trans  &trans    &kp PG_UP      &mkp LCLK  &msc SCRL_UP    &mkp RCLK  &mkp MCLK
  &trans  &trans  &trans  &trans  &trans    &kp PAGE_DOWN  &trans     &msc SCRL_DOWN  &tog SCR   &trans
                  &trans  &trans  &trans    &trans         &trans
            >;
        };

        Scroll {
            label = "Scroll";
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };

        Sniper {
            label = "Sniper";
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
